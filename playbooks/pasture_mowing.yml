---

- hosts: all
  gather_facts: false
  tasks:
    - name: Include vars
      include_vars:
        dir: "{{ working_dir }}/inventory/group_vars/all"

# Put the following three tasks into a 'tasks/get_email_facts.yml' file

    - name: Validate request
      assert:
        that:
          - ansible_eda.event.meta.headers.Host == webhook_host
          - ansible_eda.event.meta.headers["x-from"] == webhook_x_from
          - ansible_eda.event.meta.source.name == webhook_source
          - ansible_eda.event.payload.from == webhook_payload_from

    - name: Get email body
      register: email_body
      uri:
        url: "{{ webhook_url }}/{{ ansible_eda.event.payload.emailId }}/textLines"
        headers:
          Accept: "*/*"
          x-api-key: "{{ webhook_api_token }}"
        body_format: json
        body:
          decodeHtmlEntities: true
          lineSeparator: "NEWLINE"

    - name: Set email facts
      set_fact:
        email_facts: |-
          {%- set email_facts = {} -%}
          {%- for line in email_body.json.lines -%}
            {%- for conversion in string_to_dict -%}
              {%- if conversion.string in line -%}
                {%- if conversion.type == "string" -%}
                  {%- set string = line|replace(conversion.string,'')|string -%}
                {%- elif conversion.type == "int" -%}
                  {%- set string = line|replace(conversion.string,'')|int -%}
                {%- endif -%}
                {%- set x=email_facts.__setitem__(conversion.key, string) -%}
              {%- endif -%}
            {%- endfor -%} 
          {%- endfor -%}
          {{ email_facts }}

# Put this into a 'tasks/mowing_quote.yml' file and then trigger that call with 
# a when referencing the email_facts var

    - name: Make quote csv
      vars:
        equipment:
          mower: |-
            {%- set mowers = [] -%}
            {%- for mower in circlejh_equipment.mowers -%}
              {%- if (mower.min_acres < email_facts.acres < mower.max_acres) and
                     (mower.min_grass_height < email_facts.height < mower.max_grass_height) -%}
                {%- set _ = mowers.append(mower) -%}
              {%- endif -%}
            {%- endfor -%}
            {{ mowers|first }}
          truck: "{{ circlejh_equipment.truck }}"
          equipment_trailer: "{{ circlejh_equipment.trailer.equipment }}"
        project: |-
          {%- set hours = ( email_facts.acres / equipment.mower.acres_per_hour ) | round(0,'ceil') | int -%}
          {%- set days = ( hours / working_day_hours ) | round(0,'ceil') | int -%}
          {%- set weeks = ( days / 5 ) | round(0,'ceil') | int -%}
          {%- set project = {
            "hours": hours,
            "days": days,
            "weeks": weeks
            } -%}
          {{ project }} 
      template:
        src: "{{ working_dir }}/templates/mowing_quote.j2"
        dest: "/tmp/{{ email_facts.name | replace(' ', '_') }}-mowing-quote.csv"

    - name: "Get size of /tmp/{{ email_facts.name | replace(' ', '_') }}-mowing-quote.csv"
      register: quote_stat
      stat:
        path: "/tmp/{{ email_facts.name | replace(' ', '_') }}-mowing-quote.csv"

## Make this it's own tasks file

    - name: Get upload url
      register: upload_url
      uri:
        url: "https://slack.com/api/files.getUploadURLExternal?filename={{ email_facts.name | replace(' ', '_') }}-mowing-quote.csv&length={{ quote_stat.stat.size }}&pretty=1"
        headers:
          Authorization: "Bearer {{ token }}"
          charset: "utf-8"

    - name: Upload file to url
      register: upload_file
      uri:
        url: '{{ upload_url.json.upload_url }}'
        method: POST
        src: "/tmp/{{ email_facts.name | replace(' ', '_') }}-mowing-quote.csv"
        headers:
          Authorization: "Bearer {{ token }}"
          charset: "utf-8"

    - name: 'Check upload'
      uri:
        url: "https://slack.com/api/files.completeUploadExternal?files=%5B%7B%22id%22%3A%22{{ upload_url.json.file_id }}%22%7D%5D&channel_id={{ channel }}&pretty=1"
        method: POST
        headers:
          Authorization: 'Bearer {{ token }}'
          charset: "utf-8"
      register: upload_check

    - name: 'Send download link'
      uri:
        url: "https://slack.com/api/chat.postMessage?channel={{ channel }}&text={{ upload_check.json.files[0].url_private_download | urlencode }}&pretty=1"
        method: POST
        headers:
          Authorization: 'Bearer {{ token }}'
          charset: "utf-8"
      register: upload_check

...
